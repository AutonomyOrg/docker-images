# Credits: https://www.learncloudnative.com/blog/2020-02-20-github-action-build-push-docker-images

name: Build and publish updated Docker images

on:
  # Execute this workflow only code sanity check is successful
  workflow_run:
    types:
      - 'completed'

    workflows:
      - 'Check coding standards'

  # Execute this script only if any of the VERSION files was updated
  push:
    branches:
      - 'main'
      - 'feature/**'

    paths:
      - '**/VERSION'

jobs:
  
  # List all VERSION files (and hence Docker images) that were updated
  list-updated-images:
    runs-on: ubuntu-latest

    # Build a dynamic matrix containing a list of <image:version> tuples
    outputs:
      images: ${{steps.list-updated-images.outputs.images}}

    steps:

      # Checkout repository
      - name: Set up repository
        uses: actions/checkout@v3
        with:
          set-safe-directory: true
          fetch-depth: 0            # fetch all history and not only the latest commit

      # List all VERSION files that were updated and build the output matrix dynamically
      - name: Enumerate all updated VERSION files
        id: list-updated-images
        run: |
          # Initialize output string containing updated images
          images=""

          # Find all VERSION files that were modified between last and current commits
          for versionFilePath in $(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} ${{ github.event.before }} | grep "VERSION");
          do
            imageFolder=${versionFilePath%"/VERSION"}
            IMAGE_NAME=${imageFolder##*/}

            # Get latest image version number from latest line in VERSION file
            IMAGE_VERSION=$(tail -n 1 $versionFilePath)

            echo "Update Docker image '${IMAGE_NAME}' to version '${IMAGE_VERSION}'"
            
            images+="${IMAGE_NAME}:${IMAGE_VERSION},"
          done;

          # Set job step's output value (deleting trailing comma)
          echo "::set-output name=images::\"${images%?}\""


  build-and-push-images:
    runs-on: ubuntu-latest

    # Waiting for the list of updated Docker images to be built
    needs: list-updated-images

    steps:
      # Checkout repository
      - name: Set up repository
        uses: actions/checkout@v3

      # Setup Docker BuildKit Buildx image builder
      - name: Install Docker Buildx tool
        id: builder
        uses: docker/setup-buildx-action@v1
      
      # Log in to the Github Container Registry
      - name: Log in to the Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set Docker image metadata
      # - name: Extract Docker image metadata (i.e. tags and labels)
      #   id: metadata
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: |
      #       ghcr.io/${{ github.repository_owner }}/sandbox-latex
      #     tags: |
      #       latest
      #       type=ref,event=branch
      #       type=ref,event=pr
      #       type=semver,pattern={{version}}
      #       type=semver,pattern={{major}}.{{minor}}         

      # Build Docker image using Docker Buildx and push it to Github Container Registry
      # - name: Build and push Docker image(s) to GitHub Container Registry
      #   uses: docker/build-push-action@v3
      #   with:
      #     # Relative path to the place where source code with Dockerfile is located
      #     context: ./${{needs}}./.devcontainer
      #     file: ./.devcontainer/Dockerfile
      #     builder: ${{ steps.builder.outputs.name }}
      #     tags: ghcr.io/${{ github.repository_owner }}/
      #     push: ${{ github.event_name != 'pull_request' }}

      # Build Docker image using Docker Buildx and push it to Github Container Registry
      - name: Build and push Docker images to GitHub Container Registry
        run: |
          # Split the comma-separated list of updated images
          IFS="," read -a updatedImages <<< ${{needs.list-updated-images.outputs.images}}

          # Loop in the list of updated images and build each image
          for image in $updatedImages;
          do
            # Split image name and version (tuple format is <image:version>)
            imageTag=(${image//:/ })
            imageName=${imageTag[0]}
            imageVersion=${imageTag[1]}
            imageFolder="./${imageName}"
            tmpImageName="image-$RANDOM"

            echo "Build new Docker image ${image} with temporary name ${tmpImageName}"
            docker build ${imageFolder} --file ${imageFolder}/Dockerfile --tag ${tmpImageName}
            imageId="ghcr.io/${{ github.repository_owner }}/${image}"
            echo "Push new image ${imageId}"
            
            # Tag temporary image
            docker tag ${tmpImageName} ${imageId}

            # Push tagged image to Github Container Registry
            docker push ${imageId}
          done;

